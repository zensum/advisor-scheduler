(function (_, Kotlin) {
  'use strict';
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var sum = Kotlin.kotlin.collections.sum_plj8ka$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var sum_0 = Kotlin.kotlin.collections.sum_lvsncp$;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  function jsAssignApplications(slots, applications, advisors) {
    Slot$Factory_getInstance().setSlots_kand9s$(slots);
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(applications.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== applications.length; ++tmp$) {
      var item = applications[tmp$];
      destination.add_11rb$(Application_init(item));
    }
    var kotlinApplications = destination;
    var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(advisors.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== advisors.length; ++tmp$_0) {
      var item_0 = advisors[tmp$_0];
      destination_0.add_11rb$(Advisor_init(item_0));
    }
    var kotlinAdvisors = destination_0;
    var tmp$_1;
    tmp$_1 = kotlinAdvisors.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      var tmp$_2 = element.applications;
      var destination_1 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_3;
      tmp$_3 = kotlinApplications.iterator();
      while (tmp$_3.hasNext()) {
        var element_0 = tmp$_3.next();
        if (Kotlin.equals(element.id, element_0.advisor_id))
          destination_1.add_11rb$(element_0);
      }
      tmp$_2.addAll_brywnq$(destination_1);
    }
    var destination_2 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_4;
    tmp$_4 = kotlinApplications.iterator();
    while (tmp$_4.hasNext()) {
      var element_1 = tmp$_4.next();
      var $receiver = element_1.advisor_id;
      var tmp$_5 = $receiver == null || $receiver.length === 0;
      if (!tmp$_5) {
        var any$result;
        any$break: do {
          var tmp$_6;
          tmp$_6 = kotlinAdvisors.iterator();
          while (tmp$_6.hasNext()) {
            var element_2 = tmp$_6.next();
            if (Kotlin.equals(element_2.id, element_1.advisor_id)) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        tmp$_5 = !any$result;
      }
      if (tmp$_5)
        destination_2.add_11rb$(element_1);
    }
    var $receiver_0 = assignApplications(destination_2, kotlinAdvisors);
    var destination_3 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
    var tmp$_7;
    tmp$_7 = $receiver_0.iterator();
    while (tmp$_7.hasNext()) {
      var item_1 = tmp$_7.next();
      destination_3.add_11rb$(item_1.toJsAdvisor());
    }
    return Kotlin.kotlin.collections.copyToArray(destination_3);
  }
  function JsAdvisor(id, firstName, lastName, applications, slots) {
    if (firstName === void 0)
      firstName = '';
    if (lastName === void 0)
      lastName = '';
    if (applications === void 0) {
      applications = [];
    }
    if (slots === void 0) {
      slots = [];
    }
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
    this.applications = applications;
    this.slots = slots;
  }
  JsAdvisor.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JsAdvisor',
    interfaces: []
  };
  JsAdvisor.prototype.component1 = function () {
    return this.id;
  };
  JsAdvisor.prototype.component2 = function () {
    return this.firstName;
  };
  JsAdvisor.prototype.component3 = function () {
    return this.lastName;
  };
  JsAdvisor.prototype.component4 = function () {
    return this.applications;
  };
  JsAdvisor.prototype.component5 = function () {
    return this.slots;
  };
  JsAdvisor.prototype.copy_kb1xmm$ = function (id, firstName, lastName, applications, slots) {
    return new JsAdvisor(id === void 0 ? this.id : id, firstName === void 0 ? this.firstName : firstName, lastName === void 0 ? this.lastName : lastName, applications === void 0 ? this.applications : applications, slots === void 0 ? this.slots : slots);
  };
  JsAdvisor.prototype.toString = function () {
    return 'JsAdvisor(id=' + Kotlin.toString(this.id) + (', firstName=' + Kotlin.toString(this.firstName)) + (', lastName=' + Kotlin.toString(this.lastName)) + (', applications=' + Kotlin.toString(this.applications)) + (', slots=' + Kotlin.toString(this.slots)) + ')';
  };
  JsAdvisor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.firstName) | 0;
    result = result * 31 + Kotlin.hashCode(this.lastName) | 0;
    result = result * 31 + Kotlin.hashCode(this.applications) | 0;
    result = result * 31 + Kotlin.hashCode(this.slots) | 0;
    return result;
  };
  JsAdvisor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.id, other.id) && Kotlin.equals(this.firstName, other.firstName) && Kotlin.equals(this.lastName, other.lastName) && Kotlin.equals(this.applications, other.applications) && Kotlin.equals(this.slots, other.slots)))));
  };
  function JsApplication(id, advisor_id, return_at, desiredLoan) {
    if (advisor_id === void 0)
      advisor_id = '';
    if (return_at === void 0)
      return_at = '';
    if (desiredLoan === void 0)
      desiredLoan = 0;
    this.id = id;
    this.advisor_id = advisor_id;
    this.return_at = return_at;
    this.desiredLoan = desiredLoan;
  }
  JsApplication.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JsApplication',
    interfaces: []
  };
  JsApplication.prototype.component1 = function () {
    return this.id;
  };
  JsApplication.prototype.component2 = function () {
    return this.advisor_id;
  };
  JsApplication.prototype.component3 = function () {
    return this.return_at;
  };
  JsApplication.prototype.component4 = function () {
    return this.desiredLoan;
  };
  JsApplication.prototype.copy_ibifho$ = function (id, advisor_id, return_at, desiredLoan) {
    return new JsApplication(id === void 0 ? this.id : id, advisor_id === void 0 ? this.advisor_id : advisor_id, return_at === void 0 ? this.return_at : return_at, desiredLoan === void 0 ? this.desiredLoan : desiredLoan);
  };
  JsApplication.prototype.toString = function () {
    return 'JsApplication(id=' + Kotlin.toString(this.id) + (', advisor_id=' + Kotlin.toString(this.advisor_id)) + (', return_at=' + Kotlin.toString(this.return_at)) + (', desiredLoan=' + Kotlin.toString(this.desiredLoan)) + ')';
  };
  JsApplication.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.advisor_id) | 0;
    result = result * 31 + Kotlin.hashCode(this.return_at) | 0;
    result = result * 31 + Kotlin.hashCode(this.desiredLoan) | 0;
    return result;
  };
  JsApplication.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.id, other.id) && Kotlin.equals(this.advisor_id, other.advisor_id) && Kotlin.equals(this.return_at, other.return_at) && Kotlin.equals(this.desiredLoan, other.desiredLoan)))));
  };
  function assignApplications(applicationsToAssign, advisors) {
    var tmp$;
    var unassigned = toMutableList(applicationsToAssign);
    var tmp$_0;
    tmp$_0 = Slot$Factory_getInstance().all().iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      element.desiredApplicationsPerAdvisor = calcDesiredApplicationsPerAdvisor(element, advisors, unassigned);
    }
    tmp$ = applicationsToAssign.iterator();
    while (tmp$.hasNext()) {
      var app = tmp$.next();
      app.slot.desiredApplicationsPerAdvisor = calcDesiredApplicationsPerAdvisor(app.slot, advisors, unassigned);
      var $receiver = getAdvisorsHavingSlot(app.slot, advisors);
      var minBy$result;
      minBy$break: do {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }
        var minElem = iterator.next();
        var minValue = calcSlotScore(app.slot, minElem);
        while (iterator.hasNext()) {
          var e = iterator.next();
          var v = calcSlotScore(app.slot, e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
        minBy$result = minElem;
      }
       while (false);
      var advisor = minBy$result;
      if (advisor != null) {
        advisor.applications.add_11rb$(app);
        unassigned.remove_11rb$(app);
      }
      app.slot.desiredApplicationsPerAdvisor = calcDesiredApplicationsPerAdvisor(app.slot, advisors, unassigned);
    }
    return advisors;
  }
  function hasSlot(advisor, slot) {
    var $receiver = advisor.slots;
    var any$result;
    any$break: do {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.equals(element.time, slot.time)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    return any$result;
  }
  function getAdvisorsHavingSlot(slot, advisors) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    tmp$ = advisors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (hasSlot(element, slot))
        destination.add_11rb$(element);
    }
    return destination;
  }
  function getAppsInSlot(slot, advisor) {
    return getAppsInSlot_1(slot, advisor.applications);
  }
  function getAppsInSlot_0(slot, advisors) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    tmp$ = advisors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = getAppsInSlot_1(slot, element.applications);
      Kotlin.kotlin.collections.addAll_ipc267$(destination, list);
    }
    return destination;
  }
  function getAppsInSlot_1(slot, applications) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    tmp$ = applications.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (Kotlin.equals(element.slot, slot))
        destination.add_11rb$(element);
    }
    return destination;
  }
  function countAppsInSlot(slot, advisor) {
    return countAppsInSlot_1(slot, advisor.applications);
  }
  function countAppsInSlot_0(slot, advisors) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(advisors, 10));
    var tmp$;
    tmp$ = advisors.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(countAppsInSlot_1(slot, item.applications));
    }
    return sum(destination);
  }
  function countAppsInSlot_1(slot, applications) {
    var tmp$;
    var count = 0;
    tmp$ = applications.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (Kotlin.equals(element.slot, slot)) {
        count = count + 1 | 0;
      }
    }
    return count;
  }
  function calcDesiredApplicationsPerAdvisor(slot, advisors, unassignedApps) {
    var openApps = countAppsInSlot_1(slot, unassignedApps);
    if (openApps === 0)
      return -1.0;
    var assignableAdvisors = getAdvisorsToAssignTo(slot, advisors, unassignedApps);
    return (openApps + countAppsInSlot_0(slot, assignableAdvisors) | 0) / assignableAdvisors.size;
  }
  function getAdvisorsToAssignTo(slot, advisors, unassignedApps) {
    var unassigned = getAppsInSlot_1(slot, unassignedApps);
    if (unassigned.size === 0) {
      return emptyList();
    }
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    tmp$ = advisors.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (hasSlot(element, slot))
        destination.add_11rb$(element);
    }
    var assignableAdvisors = toMutableList(destination);
    var assigned = getAppsInSlot_0(slot, assignableAdvisors);
    var countedAppsInSlot = {v: assigned.size + unassigned.size | 0};
    do {
      var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_0;
      tmp$_0 = assignableAdvisors.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (countAppsInSlot(slot, element_0) > (countedAppsInSlot.v / assignableAdvisors.size | 0))
          destination_0.add_11rb$(element_0);
      }
      var advisorsToRemove = destination_0;
      assignableAdvisors.removeAll_brywnq$(advisorsToRemove);
      countedAppsInSlot.v = countedAppsInSlot.v - countAppsInSlot_0(slot, advisorsToRemove) | 0;
    }
     while (advisorsToRemove.size > 0);
    return assignableAdvisors;
  }
  function calcSlotScore(slot, advisor) {
    return (countAppsInSlot(slot, advisor) * 1000 | 0) + predictAvgBooks(advisor);
  }
  function predictAvgBooks(advisor) {
    var tmp$ = 1 / advisor.slots.size;
    var $receiver = advisor.slots;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(Math.max(item.desiredApplicationsPerAdvisor, countAppsInSlot(item, advisor)));
    }
    return tmp$ * sum_0(destination);
  }
  function Advisor(id, firstName, lastName, applications, slots) {
    if (firstName === void 0)
      firstName = '';
    if (lastName === void 0)
      lastName = '';
    if (applications === void 0) {
      applications = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    }
    if (slots === void 0)
      slots = emptyList();
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
    this.applications = applications;
    this.slots = slots;
  }
  Advisor.prototype.toJsAdvisor = function () {
    var tmp$ = this.id;
    var tmp$_0 = this.firstName;
    var tmp$_1 = this.lastName;
    var $receiver = this.applications;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver, 10));
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(item.toJsApplication());
    }
    var tmp$_3 = Kotlin.kotlin.collections.copyToArray(destination);
    var $receiver_0 = this.slots;
    var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
    var tmp$_4;
    tmp$_4 = $receiver_0.iterator();
    while (tmp$_4.hasNext()) {
      var item_0 = tmp$_4.next();
      destination_0.add_11rb$(item_0.time);
    }
    return new JsAdvisor(tmp$, tmp$_0, tmp$_1, tmp$_3, Kotlin.kotlin.collections.copyToArray(destination_0));
  };
  Advisor.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Advisor',
    interfaces: []
  };
  function Advisor_init(advisor, $this) {
    $this = $this || Object.create(Advisor.prototype);
    var tmp$ = advisor.id;
    var tmp$_0 = advisor.firstName;
    var tmp$_1 = advisor.lastName;
    var tmp$_2;
    if (advisor.applications == null) {
      tmp$_2 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    }
     else {
      var $receiver = advisor.applications;
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver.length);
      var tmp$_3;
      for (tmp$_3 = 0; tmp$_3 !== $receiver.length; ++tmp$_3) {
        var item = $receiver[tmp$_3];
        destination.add_11rb$(Application_init(item));
      }
      tmp$_2 = toMutableList(destination);
    }
    var tmp$_4;
    if (advisor.slots == null)
      tmp$_4 = emptyList();
    else {
      var $receiver_0 = advisor.slots;
      var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver_0.length);
      var tmp$_5;
      for (tmp$_5 = 0; tmp$_5 !== $receiver_0.length; ++tmp$_5) {
        var item_0 = $receiver_0[tmp$_5];
        destination_0.add_11rb$(Slot$Factory_getInstance().get_61zpoe$(item_0));
      }
      tmp$_4 = destination_0;
    }
    Advisor.call($this, tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_4);
    return $this;
  }
  function Application(id, advisor_id, slot, desiredLoan) {
    if (id === void 0)
      id = '';
    if (advisor_id === void 0)
      advisor_id = '';
    if (desiredLoan === void 0)
      desiredLoan = 0;
    this.id = id;
    this.advisor_id = advisor_id;
    this.slot = slot;
    this.desiredLoan = desiredLoan;
  }
  Application.prototype.toJsApplication = function () {
    return new JsApplication(this.id, this.advisor_id, this.slot.time, this.desiredLoan);
  };
  Application.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Application',
    interfaces: []
  };
  function Application_init(app, $this) {
    $this = $this || Object.create(Application.prototype);
    Application.call($this, app.id, app.advisor_id, Slot$Factory_getInstance().get_61zpoe$(app.return_at), app.desiredLoan);
    return $this;
  }
  function Slot(time, durationInMinutes) {
    Slot$Factory_getInstance();
    this.time = time;
    this.durationInMinutes = durationInMinutes;
    this.desiredApplicationsPerAdvisor = 0.0;
  }
  function Slot$Factory() {
    Slot$Factory_instance = this;
    this.nullSlot_0 = new Slot('not found', 0);
    this.slots_0 = emptyList();
    this.moment_0 = require('moment');
  }
  Slot$Factory.prototype.get_61zpoe$ = function (time) {
    var $receiver = this.slots_0;
    var firstOrNull_6jwkkr$result;
    firstOrNull_6jwkkr$break: do {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.equals(time, element.time) || this.moment_0(time).add(1, 'ms').isBetween(this.moment_0(element.time), this.moment_0(element.time).add(element.durationInMinutes, 'minutes'))) {
          firstOrNull_6jwkkr$result = element;
          break firstOrNull_6jwkkr$break;
        }
      }
      firstOrNull_6jwkkr$result = null;
    }
     while (false);
    var slot = firstOrNull_6jwkkr$result;
    if (slot == null) {
      return this.nullSlot_0;
    }
     else {
      return slot;
    }
  };
  Slot$Factory.prototype.all = function () {
    return toList(this.slots_0);
  };
  Slot$Factory.prototype.setSlots_kand9s$ = function (slots) {
    var tmp$ = Slot$Factory_getInstance();
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(slots.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== slots.length; ++tmp$_0) {
      var item = slots[tmp$_0];
      destination.add_11rb$(new Slot(item, 15));
    }
    tmp$.slots_0 = toList(destination);
  };
  Slot$Factory.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Factory',
    interfaces: []
  };
  var Slot$Factory_instance = null;
  function Slot$Factory_getInstance() {
    if (Slot$Factory_instance === null) {
      new Slot$Factory();
    }
    return Slot$Factory_instance;
  }
  Slot.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Slot',
    interfaces: []
  };
  var package$se = _.se || (_.se = {});
  var package$zensum = package$se.zensum || (package$se.zensum = {});
  var package$advisorScheduler = package$zensum.advisorScheduler || (package$zensum.advisorScheduler = {});
  package$advisorScheduler.assignApplications = jsAssignApplications;
  package$advisorScheduler.JsAdvisor = JsAdvisor;
  package$advisorScheduler.JsApplication = JsApplication;
  package$advisorScheduler.assignApplications_3xig1w$ = assignApplications;
  package$advisorScheduler.hasSlot_owtt3i$ = hasSlot;
  package$advisorScheduler.getAdvisorsHavingSlot_639t15$ = getAdvisorsHavingSlot;
  package$advisorScheduler.getAppsInSlot_68z2ho$ = getAppsInSlot;
  package$advisorScheduler.getAppsInSlot_639t15$ = getAppsInSlot_0;
  package$advisorScheduler.getAppsInSlot_jluyw9$ = getAppsInSlot_1;
  package$advisorScheduler.countAppsInSlot_68z2ho$ = countAppsInSlot;
  package$advisorScheduler.countAppsInSlot_639t15$ = countAppsInSlot_0;
  package$advisorScheduler.countAppsInSlot_jluyw9$ = countAppsInSlot_1;
  package$advisorScheduler.calcDesiredApplicationsPerAdvisor_pli16f$ = calcDesiredApplicationsPerAdvisor;
  package$advisorScheduler.getAdvisorsToAssignTo_pli16f$ = getAdvisorsToAssignTo;
  package$advisorScheduler.calcSlotScore_68z2ho$ = calcSlotScore;
  package$advisorScheduler.predictAvgBooks_u75gvd$ = predictAvgBooks;
  package$advisorScheduler.Advisor_init_hyd33m$ = Advisor_init;
  package$advisorScheduler.Advisor = Advisor;
  package$advisorScheduler.Application_init_9fs7ky$ = Application_init;
  package$advisorScheduler.Application = Application;
  Object.defineProperty(Slot, 'Factory', {
    get: Slot$Factory_getInstance
  });
  package$advisorScheduler.Slot = Slot;
  Kotlin.defineModule('advisor-scheduler_main', _);
  return _;
}(module.exports, require('kotlin')));
